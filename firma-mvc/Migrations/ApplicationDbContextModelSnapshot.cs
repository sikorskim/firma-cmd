// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using firma_mvc.Data;

namespace firmamvc.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("firma_mvc.Contractor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BuldingNo");

                    b.Property<string>("City");

                    b.Property<string>("Community");

                    b.Property<string>("CountryCode");

                    b.Property<string>("County");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<string>("NIP");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("PostOffice");

                    b.Property<string>("PostalCode");

                    b.Property<string>("Street");

                    b.Property<string>("Voivodeship");

                    b.HasKey("Id");

                    b.ToTable("Contractor");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Contractor");
                });

            modelBuilder.Entity("firma_mvc.FixedAssets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOfBuy");

                    b.Property<DateTime>("DateOfUseStart");

                    b.Property<decimal?>("DepreciationRate");

                    b.Property<string>("Identfier");

                    b.Property<DateTime?>("LiquidationDate");

                    b.Property<string>("LiquidationReason");

                    b.Property<string>("Name");

                    b.Property<decimal>("OriginalValue");

                    b.Property<decimal?>("UpdatedOriginalValue");

                    b.Property<decimal?>("UpgradeValue");

                    b.HasKey("Id");

                    b.ToTable("FixedAssets");
                });

            modelBuilder.Entity("firma_mvc.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<int>("ContractorId");

                    b.Property<DateTime>("DateOfDelivery");

                    b.Property<DateTime>("DateOfIssue");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("InvoiceStatusId");

                    b.Property<string>("Number");

                    b.Property<bool>("Paid");

                    b.Property<int>("PaymentMethodId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContractorId");

                    b.HasIndex("InvoiceStatusId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Invoice");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Invoice");
                });

            modelBuilder.Entity("firma_mvc.InvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("InvoiceId");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.Property<int>("Quantity");

                    b.Property<string>("UnitOfMeasureShortName");

                    b.Property<decimal>("VATValue");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceItem");
                });

            modelBuilder.Entity("firma_mvc.InvoiceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("InvoiceStatus");
                });

            modelBuilder.Entity("firma_mvc.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.Property<int>("UnitOfMeasureId");

                    b.Property<int>("VATId");

                    b.HasKey("Id");

                    b.HasIndex("UnitOfMeasureId");

                    b.HasIndex("VATId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("firma_mvc.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("firma_mvc.Parameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Parameter");
                });

            modelBuilder.Entity("firma_mvc.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DueTerm");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("firma_mvc.TaxBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<decimal?>("BuysSideEffects");

                    b.Property<decimal?>("Column15");

                    b.Property<string>("Comments");

                    b.Property<string>("CostDescription");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<decimal?>("GoodsBuys");

                    b.Property<string>("InvoiceNumber");

                    b.Property<string>("NIP");

                    b.Property<string>("Name");

                    b.Property<int>("Number");

                    b.Property<decimal?>("OtherCosts");

                    b.Property<decimal?>("OtherIncome");

                    b.Property<decimal?>("ResearchCostValue");

                    b.Property<decimal?>("Salary");

                    b.Property<decimal?>("SellValue");

                    b.HasKey("Id");

                    b.ToTable("TaxBookItem");
                });

            modelBuilder.Entity("firma_mvc.UnitOfMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.ToTable("UnitOfMeasure");
                });

            modelBuilder.Entity("firma_mvc.VAT", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Value");

                    b.HasKey("Id");

                    b.ToTable("VAT");
                });

            modelBuilder.Entity("firma_mvc.VATRegisterBuy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContractorId");

                    b.Property<DateTime>("DateOfIssue");

                    b.Property<DateTime>("DeliveryDate");

                    b.Property<string>("DocumentNumber");

                    b.Property<int>("Month");

                    b.Property<decimal?>("NoTaxDeductibleBuysValue");

                    b.Property<int>("Number");

                    b.Property<decimal?>("TaxDeductibleValue");

                    b.Property<decimal?>("TaxFreeBuysValue");

                    b.Property<decimal>("ValueBrutto");

                    b.Property<decimal>("ValueNetto");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.ToTable("VATRegisterBuy");
                });

            modelBuilder.Entity("firma_mvc.VATRegisterSell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContractorId");

                    b.Property<DateTime>("DateOfIssue");

                    b.Property<DateTime>("DeliveryDate");

                    b.Property<string>("DocumentNumber");

                    b.Property<int>("Month");

                    b.Property<int>("Number");

                    b.Property<decimal?>("VATValue23");

                    b.Property<decimal?>("VATValue3_5");

                    b.Property<decimal?>("VATValue7_8");

                    b.Property<decimal?>("ValueBrutto");

                    b.Property<decimal?>("ValueNetto0");

                    b.Property<decimal?>("ValueNetto23");

                    b.Property<decimal?>("ValueNetto3_5");

                    b.Property<decimal?>("ValueNetto7_8");

                    b.Property<decimal?>("ValueNoTax");

                    b.Property<decimal?>("ValueTaxFree");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.ToTable("VATRegisterSell");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("firma_mvc.Company", b =>
                {
                    b.HasBaseType("firma_mvc.Contractor");

                    b.Property<string>("BankAccountNumber");

                    b.Property<string>("BankName");

                    b.Property<string>("InvoiceIssueCity");

                    b.Property<string>("InvoiceIssuerName");

                    b.Property<string>("REGON");

                    b.Property<string>("Website");

                    b.ToTable("Company");

                    b.HasDiscriminator().HasValue("Company");
                });

            modelBuilder.Entity("firma_mvc.InvoiceCorrection", b =>
                {
                    b.HasBaseType("firma_mvc.Invoice");

                    b.Property<string>("CorrectionCause");

                    b.Property<DateTime>("DateOfCorrection");

                    b.Property<int>("InvoiceId");

                    b.ToTable("InvoiceCorrection");

                    b.HasDiscriminator().HasValue("InvoiceCorrection");
                });

            modelBuilder.Entity("firma_mvc.Invoice", b =>
                {
                    b.HasOne("firma_mvc.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("firma_mvc.Contractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("firma_mvc.InvoiceStatus", "InvoiceStatus")
                        .WithMany()
                        .HasForeignKey("InvoiceStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("firma_mvc.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("firma_mvc.InvoiceItem", b =>
                {
                    b.HasOne("firma_mvc.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("firma_mvc.Item", b =>
                {
                    b.HasOne("firma_mvc.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("firma_mvc.VAT", "VAT")
                        .WithMany()
                        .HasForeignKey("VATId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("firma_mvc.VATRegisterBuy", b =>
                {
                    b.HasOne("firma_mvc.Contractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("firma_mvc.VATRegisterSell", b =>
                {
                    b.HasOne("firma_mvc.Contractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("firma_mvc.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("firma_mvc.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("firma_mvc.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("firma_mvc.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
