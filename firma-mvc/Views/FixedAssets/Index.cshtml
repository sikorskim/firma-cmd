@model IEnumerable<firma_mvc.FixedAssets>

@{
    ViewData["Title"] = "Środki trwałe";
}

<p>
    <h2>Środki trwałe</h2>
</p>

<div class="my-2">
    <button type="button" class="btn btn-outline-success" data-toggle="modal" data-target="#exampleModal">
        Dodaj
    </button>

    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Nowy środek trwały</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="container-fluid">
                        @await Html.PartialAsync("CreatePartial", @ViewData["FixedAssets"])
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<table class="table table-hover table-bordered">
    <thead class="thead-light">
        <tr>
            <th>
                L.p.
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Identfier)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DateOfBuy)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DateOfUseStart)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.OriginalValue)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DepreciationRate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.UpgradeValue)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.UpdatedOriginalValue)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LiquidationDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LiquidationReason)
            </th>
        </tr>
    </thead>
    <tbody>
        @{
            int i = 1;
        }
        @foreach (var item in Model)
        {
        <tr class="table-light" onclick="location.href = '@Url.Action("Details", "FixedAssets",new { id = item.Id})'">
            <td>
                @i
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Identfier)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DateOfBuy)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DateOfUseStart)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.OriginalValue)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DepreciationRate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UpgradeValue)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UpdatedOriginalValue)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LiquidationDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LiquidationReason)
            </td>
        </tr>
            i++;
        }
    </tbody>
</table>
